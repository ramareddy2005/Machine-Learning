import os, sys
from selenium import webdriver
#from selenium.webdriver.common.keys import Keys
#from selenium.webdriver.chrome.options import Options
from datetime import date, timedelta
import time
import glob
import pandas as pd
import string
from multiprocessing import Pool
import openpyxl
from openpyxl.styles import Alignment
from openpyxl.styles.borders import Border, Side
from openpyxl.styles import PatternFill

#https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=20170121&airline=jetblue&foreign=0
#https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=20170121&airline=united&foreign=0
main_path = r'C:\Users\338153\Downloads\FP'
input_path = r'C:\Users\338153\Downloads\Input'
#keep the chrome driver in the below path
chromedriver_path = r'D:\Brower_drivers\chromedriver.exe'
    
def download_report(link):
   print [link]
   from selenium.webdriver.chrome.options import Options
   #browser = webdriver.Chrome(executable_path=chromedriver_path)
   #========
   #download_dir = main_path
   chrome_options = webdriver.ChromeOptions()
   preferences = {"download.default_directory": main_path ,
               "directory_upgrade": True,
               "safebrowsing.enabled": True }
   chrome_options.add_experimental_option("prefs", preferences)
   browser = webdriver.Chrome(chrome_options=chrome_options,executable_path=chromedriver_path)
   #==========
   browser.get(link)
   
   username = browser.find_element_by_id("IDToken1")
   username.send_keys('rmolgary')
   
   passwd = browser.find_element_by_id("IDToken2")
   passwd.send_keys('********')
   
   browser.find_element_by_name('Login.Submit').click()
   #submit.submit()
   #time.sleep(10)
   print ("Login successful")
   
   click_cre_rep_button = browser.find_element_by_id('btn_create_report')
   click_cre_rep_button.click()
   time.sleep(35)
   
   select_full_report_option = browser.find_element_by_css_selector('#dlg_select_report_msg > label:nth-child(3) > input[type="radio"]')
   select_full_report_option.click()
   print ("Report downloaded successfully") ##dlg_select_report_msg > label:nth-child(3) > input[type="radio"] 
   time.sleep(30) ##dlg_select_report_msg > label:nth-child(5) > input[type="radio"]
   browser.quit()
   return 0


def check_any_csv_file_exits():
   os.chdir(main_path)
   os.getcwd()
   filelist = glob.glob("*.csv")
   for f in filelist:
       os.remove(f)
      
def check_any_xlsx_file_exits():
   os.chdir(main_path)
   filelist = glob.glob("*.xlsx")
   for f in filelist:
      os.remove(f)
def sorting_MT_links():
    os.chdir(main_path)
    file_list = glob.glob('*.csv')
    for filename in file_list:
        df = pd.read_csv( filename )
        df = df.sort_values(by='MT Links Dropped > 60 sec',ascending=[False])
        df.to_csv(filename,index=False)
    
def conver_csv_to_xlsx():
    os.chdir(main_path)
    for csvfile in glob.glob(os.path.join('.', '*.csv')):
        df_new = pd.read_csv(csvfile)
        writer = pd.ExcelWriter(csvfile[:-4] + '.xlsx')
        df_new.to_excel(writer, index = False)
        writer.save()
   

def get_the_downloaded_file_name():
   os.chdir(main_path)
   file_name = glob.glob('./*.csv')
   #Removing multiple characters from a string
   table = string.maketrans( '', '', )
   file_name = file_name[0].translate(table,"\(){}<>")
   file_name = file_name[1:]
   file_name = r"C:\Users\338153\Downloads\\" + str(file_name)
   print file_name
   return (file_name)

def format_formulas(ws1):
    ws1['A2'] = '100% MT connectivity Flight %age'
    ws1['A3'] = '98%-less than 100% MT connectivity Flight %age'
    ws1['A4'] = '95%-less than 98% MT connectivity Flight %age'
    ws1['A5'] = '90%-less than 95% MT connectivity Flight %age'
    ws1['A6'] = 'Less than 90% MT connectivity Flight %age'
    ws1['S10'] = 'Comments'
    ws1['B2'] = '=(COUNTIF(I11:I9999,100)/COUNTA(A11:A9999))*100'
    ws1['B2'] = '=(COUNTIF(I11:I9999,100)/COUNTA(A11:A9999))*100'
    ws1['B3'] = '=((COUNTIF(I11:I9999,">=98")-COUNTIF(I11:I9999,">=99.99"))/COUNTA(A11:A9999))*100'
    ws1['B4'] = '=((COUNTIF(I11:I9999,">=95")-COUNTIF(I11:I9999,">=97.99"))/COUNTA(A11:A9999))*100'
    ws1['B5'] = '=((COUNTIF(I11:I9999,">=90")-COUNTIF(I11:I9999,">=94.99"))/COUNTA(A11:A9999))*100'
    ws1['B6'] = '=(COUNTIF(I11:I9999,"<90")/COUNTA(A11:A9999))*100'

thin_border = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style='thin'), 
                     bottom=Side(style='thin'))
wrap_alignment = Alignment(wrap_text=True)
    #Function for fillcolor
redFill = PatternFill(start_color='00FFFF', end_color='00FFFF', fill_type='solid')

def main( argv ):
   start = time.time()
   #Date format 2017/04/06 ( YYYY/Month/Day )
   print "Total input is [%d]" %len(sys.argv)
   if len(sys.argv) < 1:
      sys.exit('Usage: <python exe> <script name> <acru lock out tar file> for example:: python.exe Acru_Lockout_report.py C:\Users\user\Music\Desktop\acru_lockout_recovery_logs.tgz')
   start_date,end_date,link_JB,link_UAL,only_for_master_log_date_appened = ('','','','','')
   if len(sys.argv) > 1: # This if part code will be developed when it is required.
      number_of_days_to_subtract = int(sys.argv[1]) - 1
      end_date = date.today().strftime('%Y%m%d')
	  
      which_date_report_prepare = date.today() - timedelta(days=number_of_days_to_subtract)
      convert_date_to_string = which_date_report_prepare.strftime('%Y%m%d')
      start_date = convert_date_to_string
      link = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&end_date=' + end_date + '&airline=virgin&time_type=departure'
	  
      only_for_master_log_date_appened = start_date + '-' + end_date
   else:
      number_of_days_to_subtract = 1 #0
      which_date_report_prepare = date.today() - timedelta(days=number_of_days_to_subtract)
      convert_date_to_string = which_date_report_prepare.strftime('%Y%m%d')
      start_date = convert_date_to_string
      link_AA = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=american'
      
      link_SAS = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=sas'
      link_JB = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=jetblue&foreign=0'
      link_UAL = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=united&foreign=0'
      link_vx = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=virgin'
      link_ELAL = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=elal'
      link_Qantas = 'https://exedeair.sms.viasat.io/mSVT/flightreports/index.php?start_date=' + start_date + '&airline=qantas'
	  
      only_for_master_log_date_appened = start_date
      #The below date calculation is for to append this date to the output filename and need to pass this calculated date to the below function.
      today = date.today() - timedelta(days=1)
      date_pass_fun = today.strftime('%m-%d-%Y')

      check_any_csv_file_exits()
      check_any_xlsx_file_exits()
      p = Pool(7)
      p.map(download_report, [link_JB, link_UAL, link_vx, link_ELAL, link_Qantas,link_AA, link_SAS])

      #all_downld_file_names = get_the_downloaded_file_name()
      sorting_MT_links()
      conver_csv_to_xlsx()     
      time.sleep(20) 
      
      #Importing master sheet
      os.chdir(input_path)
      wb = openpyxl.load_workbook('Flight Performance Charts.xlsx')
      for i in range(0, 7):
          sheet_names = wb.get_sheet_names()
          names = sheet_names[-1]
          std=wb.get_sheet_by_name(names)
          wb.remove_sheet(std)
          
      #======================================
      #JetBlueuuu
      ws1 = wb.create_sheet("JB_" + start_date + "", 1)
      os.chdir(main_path)
      wb_JB = openpyxl.load_workbook('Customer_Summary_JetBlue_arrive_'+ start_date + '.xlsx')
      sheet =wb_JB.get_sheet_by_name('Sheet1')
          
      
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      #======================================
      #United
      ws1 = wb.create_sheet("UAL_" + start_date + "", 2)
      wb_UAL = openpyxl.load_workbook('Customer_Summary_United_arrive_' + start_date + '.xlsx')
      sheet =wb_UAL.get_sheet_by_name('Sheet1')
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
     
      #======================================
      #Virginnnn
      ws1 = wb.create_sheet("Vx_" + start_date + "", 3)
      wb_Vx = openpyxl.load_workbook('Customer_Summary_Virgin_arrive_' + start_date + '.xlsx')
      sheet =wb_Vx.get_sheet_by_name('Sheet1')
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      #======================================
      #Qantaaaaas
      ws1 = wb.create_sheet("QA_" + start_date + "", 4)
      wb_QA = openpyxl.load_workbook('Customer_Summary_Qantas_arrive_' + start_date + '.xlsx')
      sheet =wb_QA.get_sheet_by_name('Sheet1')
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      
      #======================================
      #ELAL
      ws1 = wb.create_sheet("Elalala_" + start_date + "", 5)
      wb_ELAL = openpyxl.load_workbook('Customer_Summary_arrive_' + start_date + '.xlsx')
      sheet =wb_ELAL.get_sheet_by_name('Sheet1')
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      #======================================
      #AA
      ws1 = wb.create_sheet("AA_" + start_date + "", 6)
      wb_AA = openpyxl.load_workbook('Customer_Summary_Aaaaamerican_arrive_' + start_date + '.xlsx')
      sheet =wb_AA.get_sheet_by_name('Sheet1')
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      #======================================
      #SAS
      ws1 = wb.create_sheet("SAS_" + start_date + "", 7)
      os.chdir(main_path)
      wb_JB = openpyxl.load_workbook('Customer_Summary_SAS_arrive_'+ start_date + '.xlsx')
      sheet =wb_JB.get_sheet_by_name('Sheet1')
          
      
      for i,row in enumerate(sheet.iter_rows()):
          for j,col in enumerate(row):
              ws1.cell(row=i+10,column=j+1).value = col.value
              format_formulas(ws1)
      for x in range(2, 7):
          for y in range(1, 3):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill
      for x in range(10, 11):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border
              ws1.cell(row= x, column=y).alignment = wrap_alignment
              ws1.cell(row= x, column=y).fill = redFill

      for x in range(11, 1000):
          for y in range(1, 20):
              ws1.cell(row= x, column=y).border = thin_border

      #To delete extra data from the reports               
      for row in ws1['T10:Y100']:
          for cell in row:
              cell.value = None
    
      for row in ws1['S11:S100']:
          for cell in row:
              cell.value = None
      
      #====================================
      from openpyxl.chart import LineChart, BarChart, Series, Reference
      from openpyxl.chart.label import DataLabelList
      #from openpyxl.chart import (LineChart, BarChart, Reference, Series)
      print ("Sheets prepared successfully")
      print ("Preparing charts....")
      #from openpyxl.chart.trendline import Trendline
      #os.chdir(r'C:\Users\338153\Downloads\Flight Performance_v8\\')
      #wb = openpyxl.load_workbook('Flight Performance Charts.xlsx')
      graphh =wb.get_sheet_by_name('Trends')
      
      #JetBlue graph
      chart1 = BarChart()
      chart1.type = "col"
      chart1.style = 10
      chart1.height = 7
      chart1.width = 36
        
      chart1.title = "MT Connectivity111"
      #chart1.y_axis.title = 'Test number'
      #chart1.x_axis.title = 'Sample length (mm)'
    
      data1 = Reference(graphh, min_col=3, min_row=99, max_row=104, max_col=7)
      cats = Reference(graphh, min_col=2, min_row=100, max_row=104)
      chart1.add_data(data1, titles_from_data=True)
      chart1.set_categories(cats)
      chart1.shape = 4
      #To add data labels
      chart1.dLbls = DataLabelList()
      chart1.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=99, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart1.y_axis.crosses = "max"
      chart1 += line1
      graphh.add_chart(chart1, "A1")

      #United graph
      chart2 = BarChart()
      chart2.type = "col"
      chart2.style = 10
      chart2.height = 7
      chart2.width = 36
      chart2.title = "MT Connectivity"
      data2 = Reference(graphh, min_col=3, min_row=109, max_row=114, max_col=7)
      chart2.add_data(data2, titles_from_data=True)
      chart2.set_categories(cats)
      chart2.shape = 4
      chart2.dLbls = DataLabelList()
      chart2.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=100, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart2.y_axis.crosses = "max"
      chart2 += line1
      graphh.add_chart(chart2, "A14")
      #Virgin
      chart3 = BarChart()
      chart3.type = "col"
      chart3.style = 10
      chart3.height = 7
      chart3.width = 36
      chart3.title = "MT Connectivity"
      data3 = Reference(graphh, min_col=3, min_row=119, max_row=124, max_col=7)
      chart3.add_data(data3, titles_from_data=True)
      chart3.set_categories(cats)
      chart3.shape = 4
      chart3.dLbls = DataLabelList()
      chart3.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=101, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart3.y_axis.crosses = "max"
      chart3 += line1
      graphh.add_chart(chart3, "A27")
      #ELAL
      chart4 = BarChart()
      chart4.type = "col"
      chart4.style = 10
      chart4.height = 7
      chart4.width = 36
      chart4.title = "ELAL-MT"
      data4 = Reference(graphh, min_col=3, min_row=129, max_row=134, max_col=7)
      chart4.add_data(data4, titles_from_data=True)
      chart4.set_categories(cats)
      chart4.shape = 4
      chart4.dLbls = DataLabelList()
      chart4.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=102, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart4.y_axis.crosses = "max"
      chart4 += line1
      graphh.add_chart(chart4, "A40")
      #Qantaaaas
      chart5 = BarChart()
      chart5.type = "col"
      chart5.style = 10
      chart5.height = 7
      chart5.width = 36
      chart5.title = "Qantas-MT Connectivity"
      data5 = Reference(graphh, min_col=3, min_row=139, max_row=144, max_col=7)
      chart5.add_data(data5, titles_from_data=True)
      chart5.set_categories(cats)
      chart5.shape = 4
      chart5.dLbls = DataLabelList()
      chart5.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=103, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart5.y_axis.crosses = "max"
      chart5 += line1
      graphh.add_chart(chart5, "A53")
      #American
      chart6 = BarChart()
      chart6.type = "col"
      chart6.style = 10
      chart6.height = 7
      chart6.width = 36
      chart6.title = "AA-MT Connectivity"
      data6 = Reference(graphh, min_col=3, min_row=149, max_row=154, max_col=7)
      chart6.add_data(data6, titles_from_data=True)
      chart6.set_categories(cats)
      chart6.shape = 4
      chart6.dLbls = DataLabelList()
      chart6.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=104, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart6.y_axis.crosses = "max"
      chart6 += line1
      graphh.add_chart(chart6, "A66")
      
      #Saaas
      chart7 = BarChart()
      chart7.type = "col"
      chart7.style = 10
      chart7.height = 7
      chart7.width = 36
      chart7.title = "SAS-MT Connectivity"
      data7 = Reference(graphh, min_col=3, min_row=159, max_row=164, max_col=7)
      chart7.add_data(data7, titles_from_data=True)
      chart7.set_categories(cats)
      chart7.shape = 4
      chart7.dLbls = DataLabelList()
      chart7.dLbls.showVal = True
      # Create a second chart
      line1 = LineChart()
      v1 = Reference(graphh, min_col=9, min_row=105, max_col=14)
      line1.add_data(v1, titles_from_data=True, from_rows=True)
      line1.y_axis.axId = 200
      chart7.y_axis.crosses = "max"
      chart7 += line1
      graphh.add_chart(chart7, "A79")
      
      #=========================================
      wb.get_sheet_names()
      wb.save(r'C:\Users\338153\Downloads\Input\Flight Performance Charts_output.xlsx')
      end = time.time()
      x = end - start
      print "Flight performance report prepared successfully:", x   
if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
 
    
